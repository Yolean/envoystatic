admin:
  access_log: []
  address:
    socket_address:
      address: 0.0.0.0
      port_value: 9901
  ignore_global_conn_limit: true
static_resources:
  listeners:
  - name: http
    address:
      socket_address:
        address: 0.0.0.0
        port_value: 8080
    filter_chains:
    - filters:
      - name: envoy.filters.network.http_connection_manager
        typed_config:
          "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
          stat_prefix: http
          # xff_num_trusted_hops: 1 # for DOWNSTREAM_REMOTE_ADDRESS below, for example 1 for GKE Ingress
          access_log:
          - name: envoy.access_loggers.file
            filter:
              not_health_check_filter: {}
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.access_loggers.file.v3.FileAccessLog
              path: "/dev/stdout"
              log_format:
                json_format:
                  start_time: "%START_TIME%"
                  req_method: "%REQ(:METHOD)%"
                  req_path: "%REQ(X-ENVOY-ORIGINAL-PATH?:PATH)%"
                  resp_code: "%RESPONSE_CODE%"
                  resp_flags: "%RESPONSE_FLAGS%"
                  bytes_recv: "%BYTES_RECEIVED%"
                  bytes_sent: "%BYTES_SENT%"
                  duration: "%DURATION%"
                  agent: "%REQ(USER-AGENT)%"
                  req_id: "%REQ(X-REQUEST-ID)%"
                  upstream_host: "%UPSTREAM_HOST%"
                  upstream_cluster: "%UPSTREAM_CLUSTER%"
                  resp_upstream_service_time: "%RESP(X-ENVOY-UPSTREAM-SERVICE-TIME)%"
                  resp_redirect: "%RESP(LOCATION)%"
                  req_host: "%REQ(:AUTHORITY)%"
                  remote_ip: "%DOWNSTREAM_REMOTE_ADDRESS_WITHOUT_PORT%"
                  direct_ip: "%DOWNSTREAM_DIRECT_REMOTE_ADDRESS_WITHOUT_PORT%"
          codec_type: AUTO
          rds:
            config_source:
              path: /etc/envoy/rds/route.yaml
          http_filters:
          - name: envoy.filters.http.health_check
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.filters.http.health_check.v3.HealthCheck
              pass_through_mode: false
              headers:
              - name: :path
                string_match:
                  exact: /
              - name: user-agent
                string_match:
                  safe_regex:
                    # We have user agent headers "GoogleHC/1.0" and "kube-probe/1.17+" at the moment
                    regex: "^(GoogleHC|kube-probe)/.*"
          - name: envoy.filters.http.csrf
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.filters.http.csrf.v3.CsrfPolicy
              filter_enabled: { "default_value": { "numerator": 1 } }
              additional_origins: []
          - name: envoy.filters.http.router
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.filters.http.router.v3.Router
  clusters: []
# https://www.envoyproxy.io/docs/envoy/latest/configuration/best_practices/edge#best-practices-edge
# example numbers divided by 10
layered_runtime:
  layers:
  - name: static_layer_0
    static_layer:
      envoy:
        resource_limits:
          listener:
            # listener name above
            http:
              connection_limit: 1000
      overload:
        global_downstream_max_connections: 5000
